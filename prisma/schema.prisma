// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// create a new type called "User" in the database based on the graphql typedefs created
model User {
  id                 Int                 @id @unique @default(autoincrement())
  username           String              @unique
  cash               BigInt
  fireBaseId         String              @unique
  friendsWithMe      User[]              @relation("friends")
  myFriends          User[]              @relation("friends")
  sentTrades         TradesOnUsers[]     @relation("senderUser")
  receivedTrades     TradesOnUsers[]     @relation("recieverUser")
  properties         PropertiesOnUsers[]
  friendRequests     FriendRequest[]     @relation("gotRequestUser")
  sentfriendRequests FriendRequest[]     @relation("requestUser")
  frozen             Boolean             @default(false)
  jailed             Boolean             @default(false)
}

model Property {
  id              Int                 @id @unique @default(autoincrement())
  country         String
  address         String
  imageUrl        String
  price           Int
  aloneIncome     Int
  setIncome       Int
  tier1Income     Int
  tier2Income     Int
  propertyValue   Int
  tier1Cost       Int
  tier2Cost       Int
  ownerConnection PropertiesOnUsers[]
}

// table that connects users to properties
model PropertiesOnUsers {
  id            Int             @id @unique @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  property      Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    Int
  status        String          @default("alone")
  beingSent     TradesOnUsers[] @relation("propertySender")
  beingRecieved TradesOnUsers[] @relation("propertyReceiver")
}

// trade model
model TradesOnUsers {
  id                 Int                 @id @unique @default(autoincrement())
  senderUser         User                @relation("senderUser", fields: [senderId], references: [id], onDelete: Cascade)
  senderId           Int
  recieverUser       User                @relation("recieverUser", fields: [recieverId], references: [id], onDelete: Cascade)
  recieverId         Int
  senderCash         BigInt
  recieverCash       BigInt
  senderProperties   PropertiesOnUsers[] @relation("propertySender")
  recieverProperties PropertiesOnUsers[] @relation("propertyReceiver")
}

model FriendRequest {
  id            Int  @id @unique @default(autoincrement())
  user          User @relation("gotRequestUser", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  requestUser   User @relation("requestUser", fields: [requestUserId], references: [id], onDelete: Cascade)
  requestUserId Int
}
