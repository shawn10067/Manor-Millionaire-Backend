// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// create a new type called "User" in the database based on the graphql typedefs created
model User {
  id             Int                 @unique @default(autoincrement())
  username       String              @unique
  cash           Int
  fireBaseId     String
  friends        User[]
  sentTrades     TradesOnUsers[]     @relation("senderUser")
  recievedTrades TradesOnUsers[]     @relation("recieverUser")
  properties     PropertiesOnUsers[]
  User           User?               @relation(fields: [userId], references: [id])
  userId         Int?
}

model Property {
  id              Int                 @unique @default(autoincrement())
  country         String
  address         String
  imageUrl        String
  price           Int
  aloneIncome     Int
  setIncome       Int
  tier1Income     Int
  tier2Income     Int
  propertyValue   Int
  tier1Cost       Int
  tier2Cost       Int
  ownerConnection PropertiesOnUsers[]
}

// table that connects users to properties
model PropertiesOnUsers {
  id                      Int             @unique @default(autoincrement())
  user                    User            @relation(fields: [userId], references: [id])
  userId                  Int
  property                Property        @relation(fields: [propertyId], references: [id])
  propertyId              Int
  status                  String          @default("alone")
  frozen                  Boolean         @default(false)
  beingSent               TradesOnUsers[] @relation("propertySender")
  beingRecieved           TradesOnUsers[] @relation("propertyReceiver")
  TradesOnUsers           TradesOnUsers?  @relation(fields: [tradesOnUsersRecieverId, tradesOnUsersSenderId], references: [recieverId, senderId])
  tradesOnUsersRecieverId Int?
  tradesOnUsersSenderId   Int?

  @@id([userId, propertyId])
}

// trade model
model TradesOnUsers {
  id                          Int                 @unique @default(autoincrement())
  senderUser                  User                @relation("senderUser", fields: [senderId], references: [id])
  senderId                    Int
  recieverUser                User                @relation("recieverUser", fields: [recieverId], references: [id])
  recieverId                  Int
  senderCash                  Int
  recieverCash                Int
  senderProperties            PropertiesOnUsers[] @relation("propertySender")
  recieverProperties          PropertiesOnUsers[] @relation("propertyReciever")
  PropertiesOnUsers           PropertiesOnUsers?  @relation(fields: [propertiesOnUsersUserId, propertiesOnUsersPropertyId], references: [userId, propertyId])
  propertiesOnUsersUserId     Int?
  propertiesOnUsersPropertyId Int?

  @@id([recieverId, senderId])
}
